name: prod

on:
  push:
    branches: [ "run_app" ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  PATH_TO_ARTIFACT: target/debug
  TAR_FILE_NAME: artifact.tar
  FILE_NAME: mybin

  PATH_TO_IMAGE_CACHE: /tmp/.buildx-cache-v2

jobs:
  build_docker:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to GitHub Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: ${{ env.PATH_TO_IMAGE_CACHE }}
        key: ${{ github.ref }}-v2-${{ github.sha }}
        restore-keys: |
          ${{ github.ref }}-v2
          refs/head/main

    - name: Push image
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: ./
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.actor }}/name3:latest
        cache-from: type=local,src=${{ env.PATH_TO_IMAGE_CACHE }}
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache 
      run: |
        rm -rf ${{ env.PATH_TO_IMAGE_CACHE }}
        mv /tmp/.buildx-cache-new ${{ env.PATH_TO_IMAGE_CACHE }}

  build_rust:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v2

    - name: Restore mtime
      run: python ./git-restore-mtime.py

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ github.ref }}-${{ github.sha }}

    - name: Build
      run: cargo build --verbose

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: ${{ env.PATH_TO_ARTIFACT }}/${{ env.FILE_NAME}}

  send_artifact:
    
    needs: [build_docker, build_rust]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3
      id: test
      with:
        name: my-artifact
        path: ${{ env.PATH_TO_ARTIFACT }}

    - name: Show artifact
      run: ls -la  ${{ steps.test.outputs.download-path }}

    - name: Compress artifact
      run: |
        mv docker-compose.yml ${{ steps.test.outputs.download-path }}
        cd ${{ steps.test.outputs.download-path }}
        tar -cvf ~/${{ env.TAR_FILE_NAME }} .

    - name: Generate ssh private key
      uses: shimataro/ssh-key-action@v2
      with: 
        key: ${{ secrets.KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        if_key_exists : replace

    - name: Send artifact
      run: |
        scp -o StrictHostKeyChecking=no \
            -P 22                       \
            ~/${{ env.TAR_FILE_NAME }}  \
            ${{ secrets.DEST_USER }}@${{ secrets.DEST_IP }}:${{ secrets.DEST_DIR }}

  run_app:

    needs: send_artifact
    runs-on: ubuntu-latest

    steps:
    - name: Generate ssh private key
      uses: shimataro/ssh-key-action@v2
      with: 
        key: ${{ secrets.KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        if_key_exists : replace

    - name: Decompress artifact
      run: |
        ssh                                                  \
          -t ${{ secrets.DEST_USER }}@${{ secrets.DEST_IP }} \
          -p 22                                              \
          -o StrictHostKeyChecking=no                        \
          -o ConnectTimeout=5                                \
          "
            tar -xvf ${{ env.TAR_FILE_NAME }}
            chmod 755 ./mybin
            ls -la
          "

    - name: Run app
      run: |
        ssh                                                  \
          -t ${{ secrets.DEST_USER }}@${{ secrets.DEST_IP }} \
          -p 22                                              \
          -o StrictHostKeyChecking=no                        \
          -o ConnectTimeout=5                                \
          "
            docker-compose -f docker-compose.yml up -d
            docker-compose exec -d homepage-api bash -c "./mybin"
            curl -i localhost:8080 -o /dev/null -w '%{http_code}\n' -s
          "

    - name: Health check
      run: curl -i ${{ secrets.DEST_IP }}:8080 -o /dev/null -w '%{http_code}\n' -s
