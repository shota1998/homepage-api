name: Hompage-api

on:
  pull_request:
    types: [opened, edited]
    branches: [ "master", "release" ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create an env file
      run: |
        touch .env

        echo DATABASE_URL       = ${{ secrets.DATABASE_URL }}       >> .env
        echo DATABASE_URL_TEST  = ${{ secrets.DATABASE_URL_TEST }}  >> .env

        echo ALLOWED_ORIGIN_1   = ${{ secrets.ALLOWED_ORIGIN_1 }}   >> .env
        echo ALLOWED_ORIGIN_2   = ${{ secrets.ALLOWED_ORIGIN_2 }}   >> .env

        echo LOCAL_FILE_STORAGE = ${{ secrets.LOCAL_FILE_STORAGE }} >> .env

        echo AWS_REGION         = ${{ secrets.AWS_REGIONE }}        >> .env

        echo AWS_BUCKET_TEST    = ${{ secrets.AWS_BUCKET_TEST }}    >> .env
        echo AWS_BUCKET_DEV     = ${{ secrets.AWS_BUCKET_DEV }}     >> .env
        echo AWS_BUCKET         = ${{ secrets.AWS_BUCKET }}         >> .env

        echo AWS_KEY_ID         = ${{ secrets.AWS_KEY_ID }}         >> .env
        echo AWS_KEY_SECRET     = ${{ secrets.AWS_KEY_SECRET }}     >> .env

        echo FILE_STORAGE_LOCATION = ${{ secrets.FILE_STORAGE_LOCATION }} >> .env

        cat .env

    - name: Build containers
      run: docker-compose run -f .devcontainer/docker-compose.yml
      run: docker exec -it homepage-api bash

    - name: Setup rust
      run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

    - name: Build app
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

# on:
#   merge:
#     branches: [ "master" ]

    # -----------------------
    # Docker
    # -----------------------
    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v2

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2

    # - name: Login to GitHub Container registry
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ${{ env.REGISTRY }}
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
        
    # - name: Build and push
    #   uses: docker/build-push-action@v3
    #   with:
    #     push: true
    #     context: .
    #     file: ./deploy/Dockerfile
    #     tags: ${{ env.REGISTRY }}/${{ github.actor }}/homepage/api:latest

  # deploy:
  #   meeds: build
  #   runs-on: ubuntu-latest

  #   steps:
        # name: Send docker-compose.yml to a server.
            #todo: Rename docker-compose.yml of remote.
            #todo: Copy docker-compose.yml of git hub.

        # name: Log in to a server.

        # name: Exec docker-compose.yml
            #tood: docer compose down 
            #tood: docer compose up
            #todo: logout

        # test: Get response from api
            # todo: store response code

        # name: Log in to a server.
            #todo: if get 200
                # delete copied docker-comose.yml
            #todo: if get other code
                # docker compose down
                # delete copied docker-comose.yml
                # Rename renamed docker-comose.yml
                # Rename renamed docker-comose.yml
                # docker compose up
            #todo: logout