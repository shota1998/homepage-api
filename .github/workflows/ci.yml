name: Hompage-api

on:
  pull_request:
    types: [ synchronize ]
    branches: [ "master", "release" ]

env:
  CARGO_TERM_COLOR: always
  DOCKER_COMPOSE_YML: .devcontainer/docker-compose.yml
  CONTAINER_NAME: homepage-api
  REGISTRY: ghcr.io

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # -----------------------
    # Docker
    # -----------------------
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ github.ref }}
          refs/head/main

    - name: Build image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: docker compose up
      run: |
        mkdir -p /tmp/.composer-cache
        docker compose -f ${{ env.DOCKER_COMPOSE_YML }} build
        docker compose -f ${{ env.DOCKER_COMPOSE_YML }} up -d

    # -----------------------
    # Rust
    # -----------------------
    - name: Create an env file
      run: |
        touch .env

        echo DATABASE_URL       = ${{ secrets.DATABASE_URL }}       >> .env
        echo DATABASE_URL_TEST  = ${{ secrets.DATABASE_URL_TEST }}  >> .env

        echo ALLOWED_ORIGIN_1   = ${{ secrets.ALLOWED_ORIGIN_1 }}   >> .env
        echo ALLOWED_ORIGIN_2   = ${{ secrets.ALLOWED_ORIGIN_2 }}   >> .env

        echo LOCAL_FILE_STORAGE = ${{ secrets.LOCAL_FILE_STORAGE }} >> .env

        echo AWS_REGION         = ${{ secrets.AWS_REGIONE }}        >> .env

        echo AWS_BUCKET_TEST    = ${{ secrets.AWS_BUCKET_TEST }}    >> .env
        echo AWS_BUCKET_DEV     = ${{ secrets.AWS_BUCKET_DEV }}     >> .env
        echo AWS_BUCKET         = ${{ secrets.AWS_BUCKET }}         >> .env

        echo AWS_KEY_ID         = ${{ secrets.AWS_KEY_ID }}         >> .env
        echo AWS_KEY_SECRET     = ${{ secrets.AWS_KEY_SECRET }}     >> .env

        echo FILE_STORAGE_LOCATION = ${{ secrets.FILE_STORAGE_LOCATION }} >> .env

        cat .env

    - name: Install Python
      uses: actions/setup-python@v2

    - name: Restore mtime
      run: python ./git-restore-mtime.py

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup Rust
      run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

    - name: Build Rust
      run: |
        cargo build --verbose
        docker logs ${{ env.CONTAINER_NAME }}

    - name: UT
      run: | 
        docker-compose exec -T ${{ env.CONTAINER_NAME }} bash -c "cargo test --verbose"
        docker logs ${{ env.CONTAINER_NAME }}

    # -----------------------
    # Teardown
    # -----------------------
    - name: Move cache 
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        